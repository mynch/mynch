* View
** Settings

*** Setting for log cutoff

    ...with "max" setting :)

*** Use filter variables to show matching hostgroups

**** Add "hostgroups" param to most controller actions

     Do not retrieve more than we need.

**** Group hostgroups according to setting

     Pivot on view_group?  Add helper for this.

** Wallscreen

   Do this first. No state needed for this.

   No state, no actions

*** Sections

**** DONE All services not in OK state

**** DONE Recent events

     For SOFT state, change color to grey, and add 1/4, 2/4, etc...

**** TODO [#B] Graphs and diagrams

     Add eyecandy.

**** TODO [#C] Abbreviate plugin output?  (Complete output on mouseover)

** Worker

   Needs state, need actions

*** Sections
    Primary, Secondary, Team, Other

*** Actions

**** Interface

     - Go to nagios / icinga page for this host

     - Ignore service / host / hostgroup

       - Forever

       - Until OK

       - until state change

       - until comment change

**** Integration with icinga / nagios

     - Comment

     - Acknowledge

     - Recheck

     - Submit result

* Code

** DONE Quantum::Superposition
   Adds "any" and "all" operators. Useful.

** DONE Sessions
   Store session data in signed cookie.

** DONE Add more sources

   Several icinga servers...


** TODO Will the data structures change?

** TODO Ignore hostgroup, host, host+service

   Until unignored?

   Until state changes.

* Test

** Test::Class

   Good things

** Test::Deep

   use Test::Deep.  Inherits Test::More ,same interface.

#+BEGIN_SRC perl
   # Load settings from $self->app->{session}->{view}

   my $expected_template = array_each (
     {
       label      => ignore(),
       hostgroups => array_each (
         isa( 'String' ),
         re( qr/^[a-z0-9-]+$/ )
       )
     },
   )

   cmp_deeply $settings, $expected_template
     => "Settings look ok";
#+END_SRC

#+BEGIN_SRC perl
     cmp_deeply $config_hostgroups, subsetof(@{ $live_hostgroups }) => "Hostgroups is a subset of the live set"
#+END_SRC


** Test::Effects

   Like Test::Trap, but with defaults for the last four. Subtests
   automatically.  VERBOSE available.

#+BEGIN_SRC perl
   effects_ok{ show_sequence( '1..10 x 2' ) }
             {
               'return' => 5,
               'stdout  => "1, 2, 3, 4, 5\n",
             }
#+END_SRC


** Test::Trap

#+BEGIN_SRC perl
   scalar trap { show_sequence( '1..10 x 2' ) };

# Test how? Test what?    , Expected value , Description
# ========= ==========    , ============== , ======================
  is_deeply $trap->return , [5]            , 'Returned as expected';
  is        $trap->stdout , q{}            , 'No output to STDOUT';
  is        $trap->stderr , q{}            , 'No output to STDERR';
  is_deeply $trap->warn   , []             , 'No warnings';
  is        $trap->die    , undef          , 'No exceptions';
  is        $trap->exit   , undef          , 'Did not exit()';
# ...
#+END_SRC
